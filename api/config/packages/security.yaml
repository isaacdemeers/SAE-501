security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
      dev:
        pattern: ^/_(profiler|wdt)
        security: true
      main:
        stateless: true
        provider: app_user_provider
        json_login:
            check_path: /auth
            username_path: username
            password_path: password
            success_handler: App\Controller\ApiLoginController
            failure_handler: lexik_jwt_authentication.handler.authentication_failure
        jwt: ~

    access_control:
    - { path: ^/$, roles: PUBLIC_ACCESS }
    - { path: ^/auth, roles: PUBLIC_ACCESS }
    - { path: ^/users/verify-email, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: PUBLIC_ACCESS }
    - {path: /users/testemail, roles: PUBLIC_ACCESS}
    - {path: /users/testusername, roles: PUBLIC_ACCESS}
    - {path: ^/events, roles: ROLE_ADMIN, methods: [DELETE]}
    - {path: ^/users, roles: ROLE_ADMIN, methods: [DELETE]}
    - {path: ^/events, roles: IS_AUTHENTICATED_FULLY}
    - {path: ^/users, roles: IS_AUTHENTICATED_FULLY}
    - {path: /api/auth/logout, roles: IS_AUTHENTICATED_FULLY}
    # a passer en ROLE_ADMIN une fois un utilisateur passer en ADMIN
    - {path: ^/admin, roles: PUBLIC_ACCESS}
    - { path: ^/docs, roles: PUBLIC_ACCESS }
    
when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
